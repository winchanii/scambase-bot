import logging
import sqlite3
import os
import re
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import BOT_TOKEN, ADMIN_IDS, CHANNEL_SCAM, CHANNEL_TRUSTED, CHANNEL_ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    WAITING_FOR_TARGET, WAITING_FOR_NOTE,
    WAITING_FOR_PROOF,
    WAITING_FOR_TRUSTED_TARGET, WAITING_FOR_TRUSTED_NOTE,
    WAITING_FOR_REMOVE_TARGET
) = range(6)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# === –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø MARKDOWN_V2 ===
def escape_markdown_v2(text: str) -> str:
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

def init_db():
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS scammers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            note TEXT,
            proof_url TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trusted (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            note TEXT
        )
    ''')
    conn.commit()
    conn.close()

def find_user_in_table(target: str, table: str):
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    target_clean = target.lstrip('@').lower()
    is_digit = target_clean.isdigit()

    if table == 'scammers':
        cursor.execute('''
            SELECT user_id, username, note, proof_url FROM scammers
            WHERE (username IS NOT NULL AND LOWER(username) = ?)
               OR (user_id IS NOT NULL AND user_id = ?)
        ''', (target_clean, int(target_clean) if is_digit else None))
    else:
        cursor.execute('''
            SELECT user_id, username, note, NULL as proof_url FROM trusted
            WHERE (username IS NOT NULL AND LOWER(username) = ?)
               OR (user_id IS NOT NULL AND user_id = ?)
        ''', (target_clean, int(target_clean) if is_digit else None))

    result = cursor.fetchone()
    conn.close()
    return result

def add_user_to_table(user_id, username, note, table, proof_url=None):
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    if table == 'scammers':
        cursor.execute(f'''
            INSERT INTO {table} (user_id, username, note, proof_url)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, note, proof_url))
    else:
        cursor.execute(f'''
            INSERT INTO {table} (user_id, username, note)
            VALUES (?, ?, ?)
        ''', (user_id, username, note))
    conn.commit()
    conn.close()

def remove_user_from_table(target: str, table: str):
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    target_clean = target.lstrip('@').lower()
    is_digit = target_clean.isdigit()

    if is_digit:
        cursor.execute(f'DELETE FROM {table} WHERE user_id = ?', (int(target_clean),))
    else:
        cursor.execute(f'DELETE FROM {table} WHERE LOWER(username) = ?', (target_clean,))

    deleted = cursor.rowcount > 0
    conn.commit()
    conn.close()
    return deleted

def move_user_between_tables(target: str, from_table: str, to_table: str):
    info = find_user_in_table(target, from_table)
    if not info:
        return False
    user_id, username, note, proof_url = info
    remove_user_from_table(target, from_table)
    add_user_to_table(user_id, username, note, to_table, proof_url)
    return True

def get_user_info_block(username: str, user_id: int, note: str = "") -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    username: –º–æ–∂–µ—Ç –±—ã—Ç—å None
    user_id: –º–æ–∂–µ—Ç –±—ã—Ç—å None
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if username and user_id:
        display = f"@{escape_markdown_v2(username)} \\| ID: {user_id}"
    elif username:
        display = f"@{escape_markdown_v2(username)} \\| ID: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    elif user_id:
        display = f"ID: {user_id}"
    else:
        display = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    msg = f"üü¢ {display}"
    if note:
        msg += f"\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n{escape_markdown_v2(note)}"
    return msg

def get_social_footer(proof_url: str = None) -> str:
    footer = (
        "üí¨ –ù–∞—à —á–∞—Ç: @loneasBASE"
    )
    if proof_url:
        footer += f"\nüîó –ü—Ä—É—Ñ—ã: [—Å—Å—ã–ª–∫–∞]({proof_url})"
    return footer

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

def start(update: Update, context: CallbackContext):
    msg = (
        "üõ°Ô∏è *–°–∫–∞–º\\-–±–∞–∑–∞ –õ–æ–Ω–µ–∞—Å–∞*\n\n"
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ `@username` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\\.\n"
        "‚úÖ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç—É—Å: _—Å–∫–∞–º–µ—Ä_ –∏–ª–∏ _–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç_\\.\n"
    )
    update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN_V2)

def handle_check_command(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check @username –∏–ª–∏ /check ID", parse_mode=ParseMode.MARKDOWN_V2)
        return

    query = context.args[0].strip()
    if not query:
        update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    _handle_user_check(update, context, query)

def handle_check_in_pm(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º @username –≤ –ª–∏—á–∫–µ
    query = update.message.text.strip()
    if query.startswith('@'):
        _handle_user_check(update, context, query)

def _handle_user_check(update: Update, context: CallbackContext, query: str):
    # –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–ï–ù–ù–´–ï
    trust_info = find_user_in_table(query, 'trusted')
    if trust_info:
        user_id, username, note, _ = trust_info
        display = f"@{escape_markdown_v2(username)} \\| ID: {user_id}" if username else f"ID: {user_id}"
        status_line = "üí°`–°—Ç–∞—Ç—É—Å`: *__–ì–ê–†–ê–ù–¢__* ‚úÖ\n\nüü¢*–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º\\! –°–ª–µ–¥—É—é—â–∏–π –≤—ã–≤–æ–¥ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\\.*"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        note_line = f"\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n{escape_markdown_v2(note)}" if note else ""

        msg = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display}\n\n"
            f"{status_line}{note_line}\n\n"
            f"> –ù–∞—à —á–∞—Ç: @loneasBASE"
        )
        with open('guarantee.jpg', 'rb') as photo:
            update.message.reply_photo(photo=photo, caption=msg, parse_mode=ParseMode.MARKDOWN_V2)
        return

    # –ü–û–¢–û–ú –°–ö–ê–ú–ï–†–´
    scam_info = find_user_in_table(query, 'scammers')
    if scam_info:
        user_id, username, note, proof_url = scam_info
        display = f"@{escape_markdown_v2(username)} \\| ID: {user_id}" if username else f"ID: {user_id}"
        status_line = "‚ö†Ô∏è –ù–ê–ô–î–ï–ù –í –°–ö–ê–ú\\-–ë–ê–ó–ï\\!‚ö†Ô∏è\n\nüí°`–°—Ç–∞—Ç—É—Å`: *__–ú–û–®–ï–ù–ù–ò–ö__*‚ùå\n \nüî¥*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–∫–∞–º–µ—Ä\\. –ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ @LoneasBasebot\\. –ù–µ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å –¥–∞–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–µ –≤–µ–¥–∏—Ç–µ –Ω–∞ –µ–≥–æ —É–ª–æ–≤–∫–∏\\.*"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        note_line = f"\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n{escape_markdown_v2(note)}" if note else ""

        proof_line = f">–ü—Ä—É—Ñ—ã: [—Å—Å—ã–ª–∫–∞]({proof_url})" if proof_url else ""
        chat_line = "–ù–∞—à —á–∞—Ç: @loneasBASE"

        if proof_url:
            footer = proof_line + "\n>" + chat_line
        else:
            footer = chat_line

        msg = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display}\n\n"
            f"{status_line}{note_line}\n\n"
            f"{footer}"
        )

        with open('scammer.jpg', 'rb') as photo:
            update.message.reply_photo(photo=photo, caption=msg, parse_mode=ParseMode.MARKDOWN_V2)
        return

    # –ù–ï –ù–ê–ô–î–ï–ù
    clean_query = query.lstrip('@')
    if clean_query.isdigit():
        display = f"ID: {clean_query}"
        user_id = clean_query
        username = None
    else:
        username_clean = clean_query
        user_id = None
        try:
            chat = context.bot.get_chat(f"@{username_clean}")
            if chat.type == 'private':
                user_id = chat.id
                username = username_clean
                display = f"@{escape_markdown_v2(username)} \\| ID: {user_id}"
            else:
                username = username_clean
                display = f"@{escape_markdown_v2(username)} \\| ID: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è @{username_clean}: {e}")
            username = username_clean
            display = f"@{escape_markdown_v2(username)} \\| ID: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—Å—Ç
    escaped_username = escape_markdown_v2(username) if username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    status_line = f"üí°–°—Ç–∞—Ç—É—Å: –ù–ï –ù–ê–ô–î–ï–ù üîç\n\n‚ö´Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{escaped_username} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ\\. –î–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞\\.\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤ \\- /mm\\."

    msg = (
        f"‚ö´Ô∏è {display}\n\n"
        f"{status_line}\n\n"
        f"> –ù–∞—à —á–∞—Ç: @loneasBASE"
    )
    with open('unknown.jpg', 'rb') as photo:
        update.message.reply_photo(photo=photo, caption=msg, parse_mode=ParseMode.MARKDOWN_V2)

# === –ö–û–ú–ê–ù–î–ê /mm ===

def mm_command(update: Update, context: CallbackContext):
    msg = (
        "‚úÖ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏*\n\n"
        "–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö:\n"
        "‚Ä¢ @guarantee1\n"
        "‚Ä¢ @guarantee2\n"
        "‚Ä¢ @guarantee3\n\n"
        "‚ö†Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞!"
    )
    update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN_V2)

# === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ID ===

def auto_update_user_id_on_message(update: Update, context: CallbackContext):
    user = update.effective_user
    if not user or not user.username:
        return  # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ—Ç username ‚Äî –Ω–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç username –≤ –±–∞–∑–µ –±–µ–∑ ID
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ trusted
    cursor.execute("SELECT user_id FROM trusted WHERE username = ? AND user_id IS NULL", (user.username,))
    result = cursor.fetchone()
    if result:
        cursor.execute("UPDATE trusted SET user_id = ? WHERE username = ?", (user.id, user.username))
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω ID –¥–ª—è @{user.username} (trusted): {user.id}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ scammers
        cursor.execute("SELECT user_id FROM scammers WHERE username = ? AND user_id IS NULL", (user.username,))
        result2 = cursor.fetchone()
        if result2:
            cursor.execute("UPDATE scammers SET user_id = ? WHERE username = ?", (user.id, user.username))
            logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω ID –¥–ª—è @{user.username} (scammers): {user.id}")

    conn.commit()
    conn.close()

# === –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í –ö–ê–ù–ê–õ ===

def publish_to_channel(context: CallbackContext, user_id, username, note, proof_url, is_scam):
    if is_scam:
        channel = CHANNEL_SCAM
        status = "–ú–û–®–ï–ù–ù–ò–ö ‚ùå"
        extra = f"\nüîó –ü—Ä—É—Ñ—ã: [—Å—Å—ã–ª–∫–∞]({proof_url})" if proof_url else ""
    else:
        channel = CHANNEL_TRUSTED
        status = "–ì–ê–†–ê–ù–¢ ‚úÖ"
        extra = ""

    msg = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{escape_markdown_v2(username)} \\| ID: {user_id}\n"
        f"üí°–°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {escape_markdown_v2(note)}{extra}"
    )

    try:
        context.bot.send_message(chat_id=channel, text=msg, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {channel}: {e}")

# === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def add_scammer_start(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–∞–º–µ—Ä–æ–≤\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return ConversationHandler.END
    update.message.reply_text("üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ `@username` –∏–ª–∏ `ID` —Å–∫–∞–º–µ—Ä–∞:")
    return WAITING_FOR_TARGET

def receive_scammer_target(update: Update, context: CallbackContext):
    target = update.message.text.strip().lstrip('@')
    if not target:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.")
        return WAITING_FOR_TARGET

    if find_user_in_table(target, 'trusted'):
        move_user_between_tables(target, 'trusted', 'scammers')
        update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ ¬´–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö¬ª –≤ ¬´—Å–∫–∞–º–µ—Ä—ã¬ª\\.")

    context.user_data['target'] = target
    update.message.reply_text("‚úèÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ \\(–∏–ª–∏ /skip\\):")
    return WAITING_FOR_NOTE

def receive_scammer_note(update: Update, context: CallbackContext):
    note = update.message.text if update.message.text != '/skip' else ""
    context.user_data['note'] = note
    update.message.reply_text("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä—É—Ñ—ã \\(–∏–ª–∏ /skip\\):")
    return WAITING_FOR_PROOF

def skip_scammer_note(update: Update, context: CallbackContext):
    context.user_data['note'] = ""
    update.message.reply_text("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä—É—Ñ—ã \\(–∏–ª–∏ /skip\\):")
    return WAITING_FOR_PROOF

def receive_scammer_proof(update: Update, context: CallbackContext):
    proof_url = update.message.text.strip()
    if proof_url.lower() == '/skip':
        context.user_data['proof_url'] = None
    elif proof_url.startswith(('http://', 'https://')):
        context.user_data['proof_url'] = proof_url
    else:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞\\. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /skip:")
        return WAITING_FOR_PROOF

    _save_to_db(update, context, 'scammers', publish=True)
    return ConversationHandler.END

def skip_scammer_proof(update: Update, context: CallbackContext):
    context.user_data['proof_url'] = None
    _save_to_db(update, context, 'scammers', publish=True)
    return ConversationHandler.END

def add_trusted_start(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return ConversationHandler.END
    update.message.reply_text("üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ `@username` –∏–ª–∏ `ID` –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return WAITING_FOR_TRUSTED_TARGET

def receive_trusted_target(update: Update, context: CallbackContext):
    target = update.message.text.strip().lstrip('@')
    if not target:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.")
        return WAITING_FOR_TRUSTED_TARGET

    if find_user_in_table(target, 'scammers'):
        move_user_between_tables(target, 'scammers', 'trusted')
        update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ ¬´—Å–∫–∞–º–µ—Ä–æ–≤¬ª –≤ ¬´–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ¬ª\\.")

    context.user_data['target'] = target
    update.message.reply_text("‚úèÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \\(–∏–ª–∏ /skip\\):")
    return WAITING_FOR_TRUSTED_NOTE

def receive_trusted_note(update: Update, context: CallbackContext):
    note = update.message.text if update.message.text != '/skip' else ""
    context.user_data['note'] = note
    _save_to_db(update, context, 'trusted', publish=True)
    return ConversationHandler.END

def skip_trusted_note(update: Update, context: CallbackContext):
    context.user_data['note'] = ""
    _save_to_db(update, context, 'trusted', publish=True)
    return ConversationHandler.END

def remove_start(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return ConversationHandler.END
    update.message.reply_text("üóëÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ `@username` –∏–ª–∏ `ID` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return WAITING_FOR_REMOVE_TARGET

def receive_remove_target(update: Update, context: CallbackContext):
    target = update.message.text.strip()
    deleted_scam = remove_user_from_table(target, 'scammers')
    deleted_trust = remove_user_from_table(target, 'trusted')

    if deleted_scam and deleted_trust:
        msg = "‚ö†Ô∏è –£–¥–∞–ª—ë–Ω –∏–∑ –æ–±–µ–∏—Ö –±–∞–∑\\."
    elif deleted_scam:
        msg = "üóëÔ∏è –£–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–∞–º\\-–±–∞–∑—ã\\."
    elif deleted_trust:
        msg = "üóëÔ∏è –£–¥–∞–ª—ë–Ω –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\\."
    else:
        msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –±–∞–∑–µ\\."

    update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN_V2)
    return ConversationHandler.END

def list_scam(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username FROM scammers")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        update.message.reply_text("–°–∫–∞–º\\-–±–∞–∑–∞ –ø—É—Å—Ç–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    lines = [f"@{uname}" if uname else f"ID: {uid}" for uid, uname in rows]
    escaped_lines = [escape_markdown_v2(line) for line in lines]
    text = "*üî¥ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤:*\n" + "\n".join(escaped_lines)
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

def list_trusted(update: Update, context: CallbackContext):
    conn = sqlite3.connect('scam_base.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username FROM trusted")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        update.message.reply_text("–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    lines = [f"@{uname}" if uname else f"ID: {uid}" for uid, uname in rows]
    escaped_lines = [escape_markdown_v2(line) for line in lines]
    text = "*üü¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n" + "\n".join(escaped_lines)
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

def help_command(update: Update, context: CallbackContext):
    msg = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "*–î–ª—è –≤—Å–µ—Ö:*\n"
        "‚Ä¢ `/check @username` –∏–ª–∏ `/check ID` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\\.\n"
        "‚Ä¢ `/listtrusted` ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤\n\n"
        
        "*–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:*\n"
        "‚Ä¢ `/addscam` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\n"
        "‚Ä¢ `/addtrusted` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ\n"
        "‚Ä¢ `/remove` ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã\n"
        "‚Ä¢ `/listscam` ‚Äî —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤\n"
        "‚Ä¢ `/listtrusted` ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\n"
        "‚Ä¢ `/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    )
    update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN_V2)

def _save_to_db(update: Update, context: CallbackContext, table: str, publish=False):
    target = context.user_data['target']
    note = context.user_data.get('note', '')
    proof_url = context.user_data.get('proof_url')  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–∫–∞–º–µ—Ä–æ–≤

    user_id = None
    username = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏
    if target.isdigit():
        user_id = int(target)
        username = None
    else:
        username = target
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ username
        try:
            chat = context.bot.get_chat(username)
            if chat.type == 'private':
                user_id = chat.id
            else:
                user_id = None  # –≠—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è @{username}: {e}")
            user_id = None

    # –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    other_table = 'trusted' if table == 'scammers' else 'scammers'
    if find_user_in_table(target, other_table):
        move_user_between_tables(target, other_table, table)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    if table == 'scammers':
        add_user_to_table(user_id, username, note, table, proof_url)
    else:
        add_user_to_table(user_id, username, note, table)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    display_parts = []
    if username:
        display_parts.append(f"@{username}")
    if user_id:
        display_parts.append(f"ID {user_id}")
    display = " | ".join(display_parts) if display_parts else target

    name = "—Å–∫–∞–º–µ—Ä" if table == 'scammers' else "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    update.message.reply_text(f"‚úÖ {name.capitalize()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {display}")

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if publish and username and user_id and note:
        publish_to_channel(context, user_id, username, note, proof_url, table == 'scammers')

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)
    return ConversationHandler.END

def error_handler(update: object, context: CallbackContext):
    logger.error("Exception while handling an update:", exc_info=context.error)

# === –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó –ö–ê–ù–ê–õ ===

def handle_channel_message(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
    if update.effective_chat.type != 'channel':
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∫–∞–Ω–∞–ª
    if str(update.effective_chat.id) != CHANNEL_ID:
        return

    text = update.effective_message.text or ""
    if not text.startswith('/addscam') and not text.startswith('/addtrusted'):
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
    parts = text.split(' ', 1)
    if len(parts) < 2:
        return

    command_full = parts[0]  # /addscam –∏–ª–∏ /addtrusted
    rest = parts[1]  # @lox1234 | –ª–æ—Ö | https://t.me/durov

    # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∏–º –ø–æ " | "
    data_parts = rest.split(' | ')
    if len(data_parts) < 2:
        return

    target = data_parts[0].lstrip('@').strip()  # @lox1234 ‚Üí lox1234
    note = data_parts[1].strip() if len(data_parts) > 1 else ""
    proof_url = data_parts[2].strip() if len(data_parts) > 2 else None

    if command_full.startswith('/addscam'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –±–∞–∑–µ
        if find_user_in_table(target, 'trusted'):
            move_user_between_tables(target, 'trusted', 'scammers')
        # –î–æ–±–∞–≤–ª—è–µ–º
        add_user_to_table(None, target, note, 'scammers', proof_url)
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –°–∫–∞–º–µ—Ä @{target} –¥–æ–±–∞–≤–ª–µ–Ω.")
    elif command_full.startswith('/addtrusted'):
        if find_user_in_table(target, 'scammers'):
            move_user_between_tables(target, 'scammers', 'trusted')
        add_user_to_table(None, target, note, 'trusted')
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –ì–∞—Ä–∞–Ω—Ç @{target} –¥–æ–±–∞–≤–ª–µ–Ω.")

# === –ó–ê–ü–£–°–ö ===

def main():
    init_db()
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–∏–∞–ª–æ–≥–∏
    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler('addscam', add_scammer_start)],
        states={
            WAITING_FOR_TARGET: [MessageHandler(Filters.text & ~Filters.command, receive_scammer_target)],
            WAITING_FOR_NOTE: [
                MessageHandler(Filters.text & ~Filters.command, receive_scammer_note),
                CommandHandler('skip', skip_scammer_note)
            ],
            WAITING_FOR_PROOF: [
                MessageHandler(Filters.text & ~Filters.command, receive_scammer_proof),
                CommandHandler('skip', skip_scammer_proof)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    ))

    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler('addtrusted', add_trusted_start)],
        states={
            WAITING_FOR_TRUSTED_TARGET: [MessageHandler(Filters.text & ~Filters.command, receive_trusted_target)],
            WAITING_FOR_TRUSTED_NOTE: [
                MessageHandler(Filters.text & ~Filters.command, receive_trusted_note),
                CommandHandler('skip', skip_trusted_note)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    ))

    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler('remove', remove_start)],
        states={
            WAITING_FOR_REMOVE_TARGET: [MessageHandler(Filters.text & ~Filters.command, receive_remove_target)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    ))

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("mm", mm_command))
    dp.add_handler(CommandHandler("listscam", list_scam))
    dp.add_handler(CommandHandler("listtrusted", list_trusted))
    dp.add_handler(CommandHandler("check", handle_check_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ @username —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
    dp.add_handler(MessageHandler(Filters.text & Filters.chat_type.private & ~Filters.command, handle_check_in_pm))

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, auto_update_user_id_on_message))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
    dp.add_handler(MessageHandler(Filters.text & Filters.chat_type.channel, handle_channel_message))

    dp.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':

    main()
